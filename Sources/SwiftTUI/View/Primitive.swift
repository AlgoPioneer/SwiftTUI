import Foundation

/// Primitive views are the building blocks for any type of view.
/// Views that are not primitive are composed, that means built out
/// of other views.
///
/// Primitive views define how to build and update the view graph node
/// that is created for them. Composed views delegate this to their body.
///
/// There are different types of primitive views:
///
/// * Unary views
/// Will generate a single control.
///
/// * Structural views
/// Use unary views to generate multiple controls, or none, or a dynamic number
/// of controls.
///
/// * Modifiers
/// Change the controls that an underlying view generates individually.
///
/// * Stacks
/// Define a container for the controls generated by the underlying view. They
/// can lazily load the controls.
protocol Primitive: NodeBuilder {}

extension Primitive {
    public var body: Never { fatalError("Cannot evaluate body of primitive view") }
}

extension View {
    static var size: Int? {
        if let I = Self.self as? Primitive.Type {
            return I.size
        }
        return Body.size
    }
}

extension View {
    var nodeBuilder: NodeBuilder {
        if let primitiveView = self as? Primitive {
            return primitiveView
        }
        return Composed(view: self)
    }
}
